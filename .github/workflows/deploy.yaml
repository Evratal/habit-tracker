name: Django CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/myapp
  DOCKER_TAG: ${{ github.sha }}
  DJANGO_SETTINGS_MODULE: config.settings

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8
      - name: Run flake8
        run: flake8 . --config .flake8

  test:
    needs: lint
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      - name: Run tests
        env:
          SECRET_KEY: 'django-insecure-test-key-123'
          USE_SQLITE_FOR_TESTS: 'true'  # Принудительно используем SQLite
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python manage.py migrate --noinput
          python manage.py test habits.tests

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Build and push
        env:
          SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        run: |
          docker build --build-arg SECRET_KEY=$SECRET_KEY -t ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }} .
          docker push ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      IMAGE: ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          # Сохраняем ключ с правильными переносами строк
          echo "${{ secrets.SSH_KEY }}" | sed 's/\\n/\n/g' > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

          # Добавляем fingerprint сервера
          ssh-keyscan -H ${{ secrets.SERVER_IP }} > ~/.ssh/known_hosts

      - name: Verify SSH connection
        run: |
          ssh -vvv -i ~/.ssh/deploy_key \
              -o StrictHostKeyChecking=no \
              ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} \
              "echo 'SSH verification successful'"

      - name: Deploy application
        run: |
          ssh -i ~/.ssh/deploy_key \
              -o StrictHostKeyChecking=no \
              ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'DEPLOY'
          #!/bin/bash
          set -e
          echo "=== Pulling new image ==="
          docker pull $IMAGE

          echo "=== Stopping old container ==="
          docker stop myapp || true
          docker rm myapp || true

          echo "=== Starting new container ==="
          docker run -d \
            --name myapp \
            --restart unless-stopped \
            -p 80:8000 \
            -v /data:/app/data \
            -e SECRET_KEY="${{ secrets.DJANGO_SECRET_KEY }}" \
            -e DJANGO_SETTINGS_MODULE="config.settings.production" \
            $IMAGE

          echo "=== Cleaning up ==="
          docker system prune -af
          DEPLOY